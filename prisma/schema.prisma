generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  phoneNumber           String                 @unique
  phoneNumberVerified   DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id          String   @id @default(cuid())
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model PasswordResetToken {
  id          String   @id @default(cuid())
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model TwoFactorToken {
  id          String   @id @default(cuid())
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id               String             @id @default(uuid())
  userId           String
  title            String
  description      String?
  imageUrl         String?
  price            Float?
  isPublished      Boolean            @default(false)
  categoryId       String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  attachments      Attachment[]
  ChapaTransaction ChapaTransaction[]
  chapters         Chapter[]
  category         Category?          @relation(fields: [categoryId], references: [id])
  purchases        Purchase[]

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  userProgress UserProgress[]

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  tx_ref    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model ChapaTransaction {
  id        String            @id @default(uuid())
  userId    String
  courseId  String
  tx_ref    String            @unique
  status    TransactionStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  course    Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  TEACHER
}

enum TransactionStatus {
  PENDING
  FAILED
  SUCCESSFUL
}
